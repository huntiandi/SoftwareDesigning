基本概念：
	权：是在进制中的实际大小，例如1234这个数 1所在的权是1000，2所在的权是100
	位权：而位权则代表了在某种进制下所代表的位置，例如1的位权是10的3次方，代表了他是千位，而不是代表它实际大小是1000；
			也就是说权代表了某个位置的实际大小，而位权代表了某个数值所在位置的权值
	权值：权值是基数乘以权的结果

进制转换：
	整数转换
		十进制转为R进制(2/8/16)---使用短除法将十进制除以要转换的进制，直道商为0，将余数倒着拼起来；
		R进制转为十进制---将R进制按权展开，将权值相加即可得到十进制数；
		二进制与8/16进制互转---2转8是3位一组不足补零，然后每一组按权展开将每组的权值拼接；16进制是四位一组转换同理
		8/16转二进制---每一位使用短除法得到一组数(不足补零)，最后将值拼接好；
		如果是8/16互转使用2或10中转一下即可
	小数转换
		十进制转为R进制---整数部分按上面的方法正常转换，小数部分将小数乘R之后区整数部分的值知道小数部分为0或者达到精度
		R进制转为十进制---整数部分按权展开将权值相加，小数部分也是但是小数部分的权从-1次方开始
机器数和真值
	机器数：数字在计算机中都是二进制的数字，机器数都是带符号的，例如8位数的机器数首位是代表了符号位0正1负
	真值：因为机器数是带符号的，所以机器数的二进制表达不是这个二进制数真正的值，所以将机器数的真正的值称为真值
原/反/补/移码
	原码：就是符号位加上本身的真值，符号位0表示正数，1表示负数；取值范围[1111 1111，0111 1111]即[-127,127]；也就是-(2^n-1 -1)~(2^n-1 -1)【n代表了数位例如8位】
	反码：正数的反码还是原码，负数的反码是符号位不变其他位取反；取值范围-(2^n-1 -1)~(2^n-1 -1)
	补码：正数的补码还是原码，负数的补码是反码加一；取值范围-(2^n-1)~(2^n-1 -1)[-128,127]；补码取值范围比原码反码大1，是因为补码的正0负0都一样；所以补码比原码/反码多了一个本来的负0也就是10000000即-128
	移码：不论正负将补码的符号位取反即可
	
浮点数运算
	浮点数：其实就是科学计数法例如M*R^e====>1.19*10^3=1190
		其中M称为尾数，R称为基数，e称为指数
	运算：在对浮点数进行运算时，有三个步骤：对阶、尾数计算、格式化
		对阶要对高阶，即要将低次方的数转为高次方的数；尾数计算就是相加；格式化即小数点左边的数不能为0也不能超过一位数，如果是0降阶，如果是两位数以上升阶
		
计算机结构
	冯诺依曼结构
		控制器，运算器，存储器，输入设备，输出设备；
		控制器从内存取出指令，翻译指令并拿相应的一些程序通过运算器进行计算，最后再把运算完的东西写回内存等等，之后把结果放回内存
	计算机组成----主机+外设
		主机：主机特指CPU+内存(DRAM)，其他主机箱里的东西例如显卡声卡统一归类到外设
			CPU：运算器+控制器
			运算器是执行部件，进行加减乘除等运算；控制器对内存中的指令进行翻译对编译好的指令进行操作
			寄存器：是cpu中的存储单元，因为读取内存中的数据很慢，而寄存器可以提供高速的读写操作减少访问内存次数提升cpu执行效率；因为内存的速度远远比不少cpu执行效率所以会有L1,2,3三级缓存存储刚刚读取的或者循环使用的数据
			读取时先读L1读到了就锁住L1行然后进行读取再解锁再load到cpu进行操作，如果L1没有就去L2找锁读解锁复制到L1再重复一次到CPU,L3同理，内存比较麻烦要通知总线占带宽之后锁内存，读指令等响应响应后放入L3再一级级放入CPU即可
			多核CPu会带来一个问题那就是缓存一致性，因为每个CPU都有自己的缓存，而写回内存时到底存谁的就成了问题，因此有了一致性协议例如MESI协议